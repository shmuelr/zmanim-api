// Copyright 2016 Google Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// [START gradle]
buildscript {      // Configuration for building
  repositories {
    jcenter()      // Bintray's repository - a fast Maven Central mirror & more
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'
    classpath 'com.google.appengine:gradle-appengine-plugin:1.9.17'
  }
}

repositories {   // repositories for JARs you access in your code
  maven {
    url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
  }

  jcenter()
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'appengine'

dependencies {
  appengineSdk 'com.google.appengine:appengine-java-sdk:1.9.+'

  compile 'com.google.appengine:appengine-api-1.0-sdk:+'  // Latest App Engine Api's
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

  // Add your dependencies here.

  // https://mvnrepository.com/artifact/com.google.code.gson/gson
  compile 'com.google.code.gson:gson:2.8.2'

  // KosherJava jar file
  compile files('src/main/webapp/lib/zmanim-1.3.0.jar')
}

// [START model]
appengine {  // App Engine tasks configuration
  downloadSdk = true
}

test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
    logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
    logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}
// [END model]

group = 'com.shmuelrosansky.zmanim'   // Generated output GroupId
version = 'alpha'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8
// [END gradle]
